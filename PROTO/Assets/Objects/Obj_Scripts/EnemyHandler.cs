using System.Collections;
using System.Collections.Generic;
using UnityEngine;

using static Utilities.Generic;

public class EnemyHandler : MonoBehaviour
{
    // Object State Variables:
    public GameObject damaged_Particle;
    public AudioSource damaged_Sound;
    public AudioSource death_Sound;

    public GameObject secondary_Obj;

    private Obj_State obj_Data;
    private Obj_State secondary_Data;

    private Rigidbody2D obj_Physics;

    public bool can_Move = true;
    public bool is_Moving;
    public int move;

    // Initiate State:
    void Start()
    {
        obj_Data = GetComponent<Obj_State>();
        secondary_Data = secondary_Obj.GetComponent<Obj_State>();

        obj_Physics = GetComponent<Rigidbody2D>();
    }

    // Health System
    void Update()
    {
        if (obj_Data.Health == 0)
            Destroy(gameObject);

        if (gameObject.name == "Enemy")
        {
            if (!can_Move && is_Moving)
            {
                if (move == 0)
                    obj_Physics.AddForce(Vector2.right * obj_Data.Speed);
                else if (move > 0)
                    obj_Physics.AddForce(Vector2.left * obj_Data.Speed);
            }
            if (can_Move && !is_Moving)
            {
                move = 1 - move;
                is_Moving = true;
                StartCoroutine(Move());
            }
        }
        else if (gameObject.name == "Enemy_Drone")
        {
            if (can_Move)
            {
                if (secondary_Data.collided_Entity != null)
                {
                    Vector2 directionToEntity = (secondary_Data.collided_Entity.transform.position - gameObject.transform.position).normalized;
                    Vector2 desiredPosition = secondary_Data.collided_Entity.transform.position + new Vector3(0, 4, 0);
                    float newYPosition = Vector2.MoveTowards(gameObject.transform.position, desiredPosition, obj_Data.Speed * Time.deltaTime).y;
                    gameObject.transform.position = new Vector2(gameObject.transform.position.x, newYPosition);
                    obj_Physics.AddForce(new Vector2(directionToEntity.x > 0 ? 1 : -1, 0) * obj_Data.Speed);
                }
                else
                {
                    obj_Physics.AddForce(Vector2.right * 0);
                    Vector2 direction =
                    new Vector2(secondary_Data.collided_Surface.x < gameObject.transform.position.x ? 1 :
                    -1, secondary_Data.collided_Surface.y < gameObject.transform.position.y ? 1 : -1);
                    obj_Physics.AddForce(direction * obj_Data.Speed);
                }
            }
        }
    }
    void OnCollisionEnter2D(Collision2D sender)
    {
        if (sender.gameObject.layer == LayerMask.NameToLayer("Projectile"))
        {
            Obj_State projectile_Data = sender.gameObject.GetComponent<Obj_State>();
            damaged_Particle.GetComponent<ParticleSystem>().Play();
            damaged_Sound.Play();
            obj_Data.Health = Mathf.Max(obj_Data.Health - projectile_Data.Damage, 0);
            Destroy(sender.gameObject);
        }
        else if (sender.gameObject.layer == LayerMask.NameToLayer("Terrain"))
        {
            damaged_Particle.GetComponent<ParticleSystem>().Play();
            damaged_Sound.Play();
            obj_Data.Health = Mathf.Max(obj_Data.Health - 1, 0);
        }
    }

    IEnumerator Move()
    {
        obj_Physics.AddForce(Vector2.right * 0);
        yield return new WaitForSeconds(1);
        can_Move = false;
        yield return new WaitForSeconds(5);
        is_Moving = false;
        can_Move = true;
    }

    void OnDestroy()
    {
        death_Sound.Play();
    }
}