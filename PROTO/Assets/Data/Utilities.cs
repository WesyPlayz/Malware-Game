using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Utilities
{
    public static class Collections
    {
        // KeyBind Collection:
        public static Dictionary<string, KeyCode> keybinds = new Dictionary<string, KeyCode>();
    }
    static class KeyBinds
    {
        // Add KeyBind:
        public static void AddKeyBind(string action_Name, KeyCode key) // ID : 01
        {
            if (!(Collections.keybinds.ContainsKey(action_Name)))
            {
                Collections.keybinds.Add(action_Name, key);
            }
            else
                Debug.LogError("[Utilities.KeyBinds - ID : 01] action_Name parameter does not contain a definition for: " + action_Name);
        }

        // Key Accesser:
        public static bool IsKey(string action_Name, string action_Type) // ID : 02
        {
            if (!Collections.keybinds.TryGetValue(action_Name, out var keyCode))
            {
                Debug.LogError("[Utilities.KeyBinds - ID : 02] action_Name parameter does not contain a definition for: " + action_Name);
                return false;
            }
            switch (action_Type)
            {
                case "Pressed":
                    return Input.GetKeyDown(keyCode);
                case "Held":
                    return Input.GetKey(keyCode);
                case "Released":
                    return Input.GetKeyUp(keyCode);
                default:
                    Debug.LogError("[Utilities.KeyBinds - ID : 02] action_Type parameter does not contain a definition for: " + action_Type);
                    return false;
            }
        }

        // Axis Accessor:
        public static float IsAxis(string axis_Name) // ID : 03
        {
            if (axis_Name != "Horizontal" && axis_Name != "Vertical")
            {
                Debug.LogError("[Utilities.KeyBinds - ID : 03] axis_Name parameter does not contain a definition for: " + axis_Name);
                return 0;
            }
            return Input.GetAxis(axis_Name);
        }
        // add 4th and 5th joystick axis
    }
    static class Collision
    {
        // Find Collided Surface:
        public static bool FindSurfaceType(string surface_Type, Collision2D sender, GameObject retriever = null) // ID : 01 // Parameters are as follows (type of surface to look for) (object causing the collision) (object being affected)
        {
            if (surface_Type == "Wall" || surface_Type == "Floor" || surface_Type == "Ceiling")
            {
                Obj_State obj_Data = null;
                if (retriever != null)
                    obj_Data = retriever.GetComponent<Obj_State>();
                foreach (ContactPoint2D contact in sender.contacts)
                {
                    GameObject current_obj = sender.gameObject;
                    if (surface_Type == "Wall" && current_obj.CompareTag("Wall") && Vector2.Dot(contact.normal, Vector2.up) < 0.7071f && Vector2.Dot(contact.normal, Vector2.down) < 0.7071f)
                    {
                        if (obj_Data != null)
                            obj_Data.last_Wall_Contact = contact.normal;
                        return true;
                    }
                    else if (surface_Type == "Floor" && current_obj.CompareTag("Floor") && Vector2.Dot(contact.normal, Vector2.up) > 0.7071f)
                    {
                        if (obj_Data != null)
                            obj_Data.last_Floor_Contact = contact.normal;
                        return true;
                    }
                    else if (surface_Type == "Ceiling" && current_obj.CompareTag("Ceiling") && Vector2.Dot(contact.normal, Vector2.down) > 0.7071f)
                    {
                        if (obj_Data != null)
                            obj_Data.last_Ceiling_Contact = contact.normal;
                        return true;
                    }
                }
            }
            else
                Debug.LogWarning("[Utilities.Collision - ID : 01] surface_Type parameter does not contain a definition for: " + surface_Type);
            return false;
        }
    }
    static class Generic
    {
        // Jump Systems:
        public static bool nonLinearJump(bool on_Floor, float jump_Force, GameObject retriever) // ID : 01 // Parameters are as follows (current surface collision for direction calculation) (force applied) (object being affected)
        {
            Obj_State obj_Data = retriever.GetComponent<Obj_State>();
            Rigidbody2D obj_Physics = retriever.GetComponent<Rigidbody2D>();
            Vector2 jump_Direction = 
                on_Floor ? obj_Data.last_Floor_Contact : 
                obj_Data.last_Floor_Contact != Vector2.zero ? obj_Data.last_Floor_Contact : 
                Vector3.up;
            obj_Physics.AddForce(jump_Direction * jump_Force, ForceMode2D.Impulse);
            return true;
        }
        public static bool LinearJump(Vector2 jump_Direction, float jump_Force, GameObject retriever) // ID : 02 // Parameters are as follows (direction of movement) (force applied) (object being affected)
        {
            Rigidbody2D obj_Physics = retriever.GetComponent<Rigidbody2D>();
            obj_Physics.AddForce(jump_Direction * jump_Force, ForceMode2D.Impulse);
            return true;
        }
    }
}