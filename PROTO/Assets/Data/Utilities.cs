using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Utilities
{
    [System.Serializable]
    public class Savable_Data
    {
        public List<Obj_Data> Savable_Data_List = new List<Obj_Data>();
    }
    [System.Serializable]
    public class Obj_Data
    {
        // Object Properties:
        public string Name;

        // Position Values:
        public float xPos;
        public float yPos;
        public float zPos;

        // Rotation Values:
        public float xRot;
        public float yRot;
        public float zRot;

        // Scale Values:
        public float xScale;
        public float yScale;
        public float zScale;

        // Script Properties:
        public float Health;
        public float Speed;
        public float Reach;
        public float volume;
        public float dash_Force;
        public float dash_Cooldown;
        public float jump_Force;
        public float jump_Cooldown;
        public float Damage;
        public float melee_Cooldown;
        public float range_Cooldown;

        public int Item_ID;
        public int max_Jumps;
        public int jumps_Occurred;
        public int max_Energy;
        public int Energy;
        public int energy_Cost;
        public int max_Energy_Increase;
        public int mix_Energy_Increase;
    }
    public static class Collections
    {
        // KeyBind Collection:
        public static Dictionary<string, KeyCode> keybinds = new Dictionary<string, KeyCode>();
    }
    static class Collision
    {
        // Find Collided Surface:
        public static bool FindSurfaceType(string surface_Type, Collision2D sender, GameObject retriever = null) // ID : 01 // Parameters are as follows (type of surface to look for) (object causing the collision) (object being affected)
        {
            if (surface_Type == "Wall" || surface_Type == "Floor" || surface_Type == "Ceiling")
            {
                Obj_State obj_Data = null;
                if (retriever != null)
                    obj_Data = retriever.GetComponent<Obj_State>();
                foreach (ContactPoint2D contact in sender.contacts)
                {
                    GameObject current_obj = sender.gameObject;
                    if (surface_Type == "Wall" && current_obj.CompareTag("Wall") && Vector2.Dot(contact.normal, Vector2.up) < 0.7071f && Vector2.Dot(contact.normal, Vector2.down) < 0.7071f)
                    {
                        if (obj_Data != null)
                            obj_Data.last_Wall_Contact = contact.normal;
                        return true;
                    }
                    else if (surface_Type == "Floor" && current_obj.CompareTag("Floor") && Vector2.Dot(contact.normal, Vector2.up) > 0.7071f)
                    {
                        if (obj_Data != null)
                            obj_Data.last_Floor_Contact = contact.normal;
                        return true;
                    }
                    else if (surface_Type == "Ceiling" && current_obj.CompareTag("Ceiling") && Vector2.Dot(contact.normal, Vector2.down) > 0.7071f)
                    {
                        if (obj_Data != null)
                            obj_Data.last_Ceiling_Contact = contact.normal;
                        return true;
                    }
                }
            }
            else
                Debug.LogWarning("[Utilities.Collision - ID : 01] surface_Type parameter does not contain a definition for: " + surface_Type);
            return false;
        }
    }
    static class Generic
    {
        // Jump Systems:
        public static bool nonLinearJump(bool on_Floor, float jump_Force, GameObject retriever) // ID : 01 // Parameters are as follows (current surface collision for direction calculation) (force applied) (object being affected)
        {
            Obj_State obj_Data = retriever.GetComponent<Obj_State>();
            Rigidbody2D obj_Physics = retriever.GetComponent<Rigidbody2D>();
            Vector2 jump_Direction = 
                on_Floor ? obj_Data.last_Floor_Contact : 
                obj_Data.last_Floor_Contact != Vector2.zero ? obj_Data.last_Floor_Contact : 
                Vector3.up;
            obj_Physics.AddForce(jump_Direction * jump_Force, ForceMode2D.Impulse);
            return true;
        }
        public static bool LinearJump(Vector2 jump_Direction, float jump_Force, GameObject retriever) // ID : 02 // Parameters are as follows (direction of movement) (force applied) (object being affected)
        {
            Rigidbody2D obj_Physics = retriever.GetComponent<Rigidbody2D>();
            obj_Physics.AddForce(jump_Direction.normalized * jump_Force, ForceMode2D.Impulse);
            return true;
        }
    }
}