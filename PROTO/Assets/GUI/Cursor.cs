using System.Collections;
using System.Collections.Generic;

using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

using TMPro;

using Utilities;
using static Utilities.Collections;
using System.Security.Cryptography.X509Certificates;

public class JoystickCursor : MonoBehaviour
{
    [SerializeField] private List<Button> Buttons = new List<Button>();

    public GameObject main_Menu;
    public GameObject load_Menu;
    public GameObject pause_Menu;

    public float cursor_Speed;
    public float cursor_Sensitivity;

    public float screen_Border;

    private Vector3 right_Joystick_Input;
    private Vector3 current_Cursor_Pos;

    void Start()
    {
        Buttons[0].onClick.AddListener(() => Play_Game()); // Play Button - Main Menu
        Buttons[1].onClick.AddListener(() => Load_Menu_State("Open")); // Load Button - Main Menu
        // Buttons[2].onClick.AddListener(() => Load_Data()); // Load Button - Load Menu
        Buttons[2].onClick.AddListener(() => Load_Menu_State("Close")); // Exit Button - Load Menu
        // Buttons[4].onClick.AddListener(() => Credits_Menu_State("Open")); // Credits Button - Main Menu
        // Buttons[5].onClick.AddListener(() => Credits_Menu_State("Close")); // Credits Button - Credits Menu
        Buttons[3].onClick.AddListener(() => Quit_Game()); // Quit Button - Main Menu
    }

    void Update()
    {
        right_Joystick_Input = new Vector2(Input.GetAxis("right_Horizontal"), Input.GetAxis("right_Vertical"));
        if (right_Joystick_Input.magnitude > cursor_Sensitivity)
            current_Cursor_Pos = transform.position + new Vector3(right_Joystick_Input.x, right_Joystick_Input.y, 0) * cursor_Speed * Time.deltaTime;

        Vector3 clamped_Position = Camera.main.WorldToScreenPoint(current_Cursor_Pos);
        clamped_Position.x = Mathf.Clamp(clamped_Position.x, screen_Border, Screen.width - screen_Border);
        clamped_Position.y = Mathf.Clamp(clamped_Position.y, screen_Border, Screen.height - screen_Border);
        transform.position = Camera.main.ScreenToWorldPoint(clamped_Position);

        if (Input.GetButtonDown("Start"))
        {
            PauseGame();
        }
        if (Time.timeScale == 0)
        {
            if (Input.GetAxis("Horizontal Dpad") < .0)
            {
                Time.timeScale = 1;
                MainMenu();
            }
            else if (Input.GetAxis("Horizontal Dpad") > .0)
                Quit_Game();
        }

        if (Input.GetButtonDown("Jump"))
        {
            PointerEventData pointerData = new PointerEventData(EventSystem.current);
            pointerData.position = clamped_Position;

            List<RaycastResult> ui_Elements = new List<RaycastResult>();
            EventSystem.current.RaycastAll(pointerData, ui_Elements);

            if (ui_Elements.Count > 0)
            {
                foreach (RaycastResult ui_Element in ui_Elements)
                {
                    Button button = ui_Element.gameObject.GetComponent<Button>();
                    if (button != null)
                    {
                        End_Action();
                        button.onClick.Invoke();
                        continue;
                    }

                    TMP_Dropdown dropdown = ui_Element.gameObject.GetComponent<TMP_Dropdown>();
                    if (dropdown != null)
                    {
                        End_Action();
                        dropdown.onValueChanged.Invoke(dropdown.value);
                        dropdown.Show();
                        continue;
                    }

                    TMP_InputField inputField = ui_Element.gameObject.GetComponent<TMP_InputField>();
                    if (inputField != null)
                    {
                        End_Action();
                        inputField.ActivateInputField();
                        continue;
                    }
                }
            }
            else
                End_Action();
        }
    }

    void PauseGame()
    {
        if (Time.timeScale != 0)
        {
            pause_Menu.SetActive(true);
            Time.timeScale = 0;
        }
        else
        {
            pause_Menu.SetActive(false);
            Time.timeScale = 1;
        }
    }
    void MainMenu()
    {
        SceneManager.LoadScene(0);
    }

    void End_Action()
    {
        TMP_Dropdown dropdown = FindObjectOfType<TMP_Dropdown>();
        TMP_InputField inputField = FindObjectOfType<TMP_InputField>();

        if (dropdown != null && dropdown.IsExpanded)
            dropdown.Hide();
        if (inputField != null && inputField.isFocused)
            inputField.DeactivateInputField();
    }
    void Play_Game()
    {
        SceneManager.LoadScene("Scene1");
    }
    void Load_Menu_State(string state)
    {
        main_Menu.SetActive(state == "Open" ? false : true);
        load_Menu.SetActive(state == "Open" ? true : false);
    }
    /* void Load_Data()
    {
        can_Load = false;

        string path = Application.persistentDataPath + "/" + Selected_Level + ".json";
        if (File.Exists(path))
        {
            string jsonData = File.ReadAllText(path);
            Savable_Data saved_Data = JsonUtility.FromJson<Savable_Data>(jsonData);
            List<Obj_Data> loaded_Data = saved_Data.Savable_Data_List;

            for (int d = 0; d < loaded_Data.Count; d++)
            {
                Obj_Data obj_Data = loaded_Data[d];

                GameObject prefab = null;
                for (int i = 0; i < Prefabs.Count; i++)
                {
                    if (obj_Data.Name == Prefabs[i].name)
                        prefab = Prefabs[i];
                }
                GameObject obj =
                    ClonePrefab(prefab, GameObject.Find("Level").transform,
                    new Vector2(obj_Data.xPos, obj_Data.yPos),
                    Quaternion.Euler(obj_Data.xRot, obj_Data.yRot, obj_Data.zRot),
                    new Vector3(obj_Data.xScale, obj_Data.yScale, obj_Data.zScale));

                ObjectHandler objHandler = obj.GetComponent<ObjectHandler>();
                Collider2D objPhysics = obj.GetComponent<Collider2D>();

                objPhysics.enabled = true;
                objHandler.Physics = obj_Data.Physics;
                objHandler.Collision = obj_Data.Collision;
                objHandler.Electronic = obj_Data.Electronic;
                objHandler.can_Operate = obj_Data.can_Operate;
                objHandler.can_Damage = obj_Data.can_Damage;
                objHandler.can_Support = obj_Data.can_Support;
                objHandler.is_Supported = obj_Data.is_Supported;
                objHandler.Force = obj_Data.Force;
                objHandler.Radius = obj_Data.Radius;
                objHandler.Damage = obj_Data.Damage;
                objHandler.damage_Rate = obj_Data.damage_Rate;
                objHandler.Speed = obj_Data.Speed;
                objHandler.Health = obj_Data.Health;
                objHandler.max_Modes = obj_Data.max_Modes;
                objHandler.Mode = obj_Data.Mode;
            }
            StartCoroutine(DisplayText("Loaded: " + path));
        }
        Load_Menu.SetActive(false);
        main_Menu.SetActive(true);
    }*/
    void Quit_Game()
    {
        #if UNITY_EDITOR
            UnityEditor.EditorApplication.isPlaying = false;
        #else
            Application.Quit();
        #endif
    }/*
    void SaveLevel()
    {
        can_Save = false;

        GameObject level = GameObject.Find("Level");
        Savable_Data Saving_Data = new Savable_Data();

        for (int i = 0; i < level.transform.childCount; i++)
        {
            Transform child = level.transform.GetChild(i);
            ObjectHandler obj_Handler = child.gameObject.GetComponent<ObjectHandler>();
            Obj_Data obj_Data = new Obj_Data();

            obj_Data.Name = child.gameObject.name;

            obj_Data.xPos = child.gameObject.transform.position.x;
            obj_Data.yPos = child.gameObject.transform.position.y;
            obj_Data.zPos = child.gameObject.transform.position.z;

            obj_Data.xRot = child.gameObject.transform.rotation.x;
            obj_Data.yRot = child.gameObject.transform.rotation.y;
            obj_Data.zRot = child.gameObject.transform.rotation.z;

            obj_Data.xScale = child.gameObject.transform.localScale.x;
            obj_Data.yScale = child.gameObject.transform.localScale.y;
            obj_Data.zScale = child.gameObject.transform.localScale.z;

            obj_Data.Physics = obj_Handler.Physics;
            obj_Data.Collision = obj_Handler.Collision;
            obj_Data.Electronic = obj_Handler.Electronic;
            obj_Data.can_Operate = obj_Handler.can_Operate;
            obj_Data.can_Damage = obj_Handler.can_Damage;
            obj_Data.can_Support = obj_Handler.can_Support;
            obj_Data.is_Supported = obj_Handler.is_Supported;
            obj_Data.Force = obj_Handler.Force;
            obj_Data.Radius = obj_Handler.Radius;
            obj_Data.Damage = obj_Handler.Damage;
            obj_Data.damage_Rate = obj_Handler.damage_Rate;
            obj_Data.Speed = obj_Handler.Speed;
            obj_Data.Health = obj_Handler.Health;
            obj_Data.max_Modes = obj_Handler.max_Modes;
            obj_Data.Mode = obj_Handler.Mode;
            Saving_Data.Savable_Data_List.Add(obj_Data);
        }
        string path = Application.persistentDataPath + "/" + current_Level_Name + ".json";
        string jsonData = JsonUtility.ToJson(Saving_Data);
        print(jsonData);
        File.WriteAllText(path, jsonData);
        string savedData = File.ReadAllText(path);

        StartCoroutine(DisplayText("Saved: " + path));

        bool can_Add = true;
        foreach (TMP_Dropdown.OptionData option in Level_Selecter.options)
        {
            if (option.text == current_Level_Name)
            {
                can_Add = false;
                break;
            }
        }
        if (can_Add)
            Level_Selecter.options.Add(new TMP_Dropdown.OptionData(current_Level_Name));

        Save_Menu.SetActive(false);
        main_Menu.SetActive(true);
    }*/
}